<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd"
>

	<!-- 启用组件扫描 -->
	<context:component-scan base-package="org.springframework.beans.model"/>

	<!-- 循环依赖 -->
	<!--<bean id="man" class="org.springframework.beans.model.Man" init-method="init">-->
	<bean id="man123" class="org.springframework.beans.model.Man">
		<property name="women" ref="women123"/>
	</bean>
	<bean id="women123" class="org.springframework.beans.model.Women">
		<property name="man" ref="man123"/>
	</bean>

	<!-- @autowire -->
	<!-- <context:annotation-config/> -->  <!-- TODO：如何解析的 -->

	<!-- @Autowired 的处理类 -->
	<!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->
	<!-- @Resource  的处理类 -->
	<!-- <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>-->

	<!-- <bean id="messageSource" class="org.springframework.context.MessageSource"/>-->

	<!--<bean id="CustomerBean" class="org.springframework.beans.model.Customer">
		<property name="action" value="buy"/>
		<property name="type" value="1"/>
	</bean>

	<bean id="PersonBean" class="org.springframework.beans.model.Person">
		<property name="name" value="yiibai"/>
		<property name="address" value="address ABC"/>
		<property name="age" value="29"/>
	</bean>-->

	<!-- 配置被代理的 Bean -->
	<!--<bean id="arithmeticCalculator" class="org.springframework.beans.bean.aop.ArithmeticCalculatorImpl"/>-->
	<!-- 配置切换的 Bean -->
	<!--<bean id="loggingAspect" class="org.springframework.beans.bean.aop.LoggingAspect"/>-->
	<!--<bean id="loggingAdvisor" class="org.springframework.beans.bean.aop.LoggingAdvisor"/>-->

	<!-- 配置 AOP -->
	<!--<aop:config>
		&lt;!&ndash; <aop:config proxy-target-class="true"> &ndash;&gt;

		&lt;!&ndash; 声明一个切点 &ndash;&gt;
		<aop:pointcut id="pointcut"
					  expression="execution(* org.springframework.beans.bean.aop.ArithmeticCalculator.*(int, int))"/>
		&lt;!&ndash;
		<aop:aspect> 与 <aop:advisor> 的区别：
		<aop:aspect>    ：定义切面，切面包括 通知 和 切点
		<aop:advisor>   ：定义通知器，通知器跟切面一样，也包括通知和切点
						：定义 <aop:advisor> 中引用的通知时，通知必须实现 Advice 接口
						public class AopAdvisorHelper implements MethodBeforeAdvice,AfterReturningAdvice
						advice-ref：必须是 spring-aop/src/main/java/org/aopalliance/aop/Advice.java 的子类
								   org.aopalliance.aop.Advice
										org.springframework.aop.BeforeAdvice
											org.springframework.aop.MethodBeforeAdvice
										org.springframework.aop.AfterAdvice
											org.springframework.aop.AfterReturningAdvice
												=>> org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke
											org.springframework.aop.ThrowsAdvice
											org.springframework.aop.aspectj.AspectJAfterAdvice
										org.springframework.aop.aspectj.AspectJAroundAdvice
						<aop:advisor> 大多用于事务管理的 XML 配置，![-w600](https://lhsaq2009.oss-cn-hangzhou.aliyuncs.com/image/202209162324364.png)
&ndash;&gt;
		<aop:advisor id="advisor" advice-ref="loggingAdvisor" pointcut-ref="pointcut"/>

		&lt;!&ndash; 注意：<aop:aspect> 配置在 <aop:advisor> 前面会报错 &ndash;&gt;
		<aop:aspect ref="loggingAspect" order="2">
			<aop:before method="beforeMethod" pointcut-ref="pointcut"/>
			<aop:after method="afterMethod" pointcut-ref="pointcut"/>
		</aop:aspect>

	</aop:config>-->

	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<context:annotation-config/>
	<!-- 启用 AspectJ 自动代理 -->
	<aop:aspectj-autoproxy/>
</beans>