package org.springframework.context.annotation;import org.springframework.beans.factory.BeanClassLoaderAware;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.BeanDefinition;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.context.annotation.EnableLoadTimeWeaving.AspectJWeaving;import org.springframework.context.weaving.AspectJWeavingEnabler;import org.springframework.context.weaving.DefaultContextLoadTimeWeaver;import org.springframework.core.annotation.AnnotationAttributes;import org.springframework.core.type.AnnotationMetadata;import org.springframework.instrument.classloading.LoadTimeWeaver;import org.springframework.lang.Nullable;import org.springframework.util.Assert;/** * {@code @Configuration} class that registers a {@link LoadTimeWeaver} bean. * * <p>This configuration class is automatically imported when using the * {@link EnableLoadTimeWeaving} annotation. See {@code @EnableLoadTimeWeaving} * javadoc for complete usage details. * * @author Chris Beams * @since 3.1 * @see LoadTimeWeavingConfigurer * @see ConfigurableApplicationContext#LOAD_TIME_WEAVER_BEAN_NAME */@Configuration@Role(BeanDefinition.ROLE_INFRASTRUCTURE)public class LoadTimeWeavingConfiguration implements ImportAware, BeanClassLoaderAware {	// @EnableLoadTimeWeaving	@Nullable // "aspectjWeaving" -> {EnableLoadTimeWeaving$AspectJWeaving@4495} "ENABLED"	private AnnotationAttributes enableLTW;		// 注解的属性	@Nullable	private LoadTimeWeavingConfigurer ltwConfigurer;	@Nullable	private ClassLoader beanClassLoader;	// "aspectjWeaving" -> {EnableLoadTimeWeaving$AspectJWeaving@4495} "ENABLED"	@Override	public void setImportMetadata(AnnotationMetadata importMetadata) {		this.enableLTW = AnnotationConfigUtils.attributesFor(importMetadata, EnableLoadTimeWeaving.class);		if (this.enableLTW == null) {			throw new IllegalArgumentException(					"@EnableLoadTimeWeaving is not present on importing class " + importMetadata.getClassName());		}	}	@Autowired(required = false)	public void setLoadTimeWeavingConfigurer(LoadTimeWeavingConfigurer ltwConfigurer) {		this.ltwConfigurer = ltwConfigurer;	}	/*	 * =>> AbstractAutowireCapableBeanFactory#initializeBean(..)	 *     =>> invokeAwareMethods(...)	 */	@Override	public void setBeanClassLoader(ClassLoader beanClassLoader) {		this.beanClassLoader = beanClassLoader;	}	/**	 * =>> AbstractApplicationContext#refresh	 *     =>> finishBeanFactoryInitialization(beanFactory)	 *         =>> beanFactory.preInstantiateSingletons();	 *             =>> for beanNames -> getBean("loadTimeWeaver");	 *                 =>> AbstractBeanFactory#doGetBean(..)	 *                     ...	 *                     =>> AbstractAutowireCapableBeanFactory#doCreateBean(..)	 *                         =>> createBeanInstance(beanName, mbd, args)	 *                                 * mbd = {ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition@3525}	 *                                 *     factoryBeanName   = "org.springframework.context.annotation.LoadTimeWeavingConfiguration"	 *                                 *     factoryMethodName = "loadTimeWeaver"	 *                             =>> instantiateUsingFactoryMethod(beanName, mbd, args);	 *                                     * 若工厂未实例化，先实例化工厂：beanFactory.getBean(mbd.getFactoryBeanName())	 *                                 =>> ConstructorResolver#instantiateUsingFactoryMethod(..)	 *                                     ...	 *                                         * 反射调用工厂方法：factoryMethod.invoke(factoryBean, args);	 *                                     =>> SimpleInstantiationStrategy#instantiate(.., final Method factoryMethod, ..)	 *                                         ...	 *                                         =>> LoadTimeWeavingConfiguration#loadTimeWeaver()	 */	@Bean(name = ConfigurableApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME)	@Role(BeanDefinition.ROLE_INFRASTRUCTURE)	public LoadTimeWeaver loadTimeWeaver() {									//		Assert.state(this.beanClassLoader != null, "No ClassLoader set");		/*		 * public interface LoadTimeWeaver {		 *     void addTransformer(ClassFileTransformer transformer);		 * }		 */		LoadTimeWeaver loadTimeWeaver = null;		if (this.ltwConfigurer != null) {			// The user has provided a custom LoadTimeWeaver instance			loadTimeWeaver = this.ltwConfigurer.getLoadTimeWeaver();		}		if (loadTimeWeaver == null) {			/**			 * No custom LoadTimeWeaver provided -> fall back to the default			 *			 * {@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver}			 *			 * loadTimeWeaver = {DefaultContextLoadTimeWeaver@3441}			 * 		loadTimeWeaver = {InstrumentationLoadTimeWeaver@5592}			 */			loadTimeWeaver = new DefaultContextLoadTimeWeaver(this.beanClassLoader);		}		if (this.enableLTW != null) {			AspectJWeaving aspectJWeaving = this.enableLTW.getEnum("aspectjWeaving");	//			switch (aspectJWeaving) {				case DISABLED:					// AJ weaving is disabled -> do nothing					break;				case AUTODETECT:					if (this.beanClassLoader.getResource(AspectJWeavingEnabler.ASPECTJ_AOP_XML_RESOURCE) == null) {						// No aop.xml present on the classpath -> treat as 'disabled'						break;					}					// aop.xml is present on the classpath -> enable					AspectJWeavingEnabler.enableAspectJWeaving(loadTimeWeaver, this.beanClassLoader);					break;				case ENABLED:					/*					 *					 * =>> AspectJWeavingEnabler#enableAspectJWeaving(loadTimeWeaver, ...)					 *     if loadTimeWeaver = null -> new InstrumentationLoadTimeWeaver(beanClassLoader);					 *     loadTimeWeaver.addTransformer(					 *     				transformer: new AspectJClassBypassingClassFileTransformer(					 *     					delegate: new ClassPreProcessorAgentAdapter()					 *     				)					 *     );					 */					AspectJWeavingEnabler.enableAspectJWeaving(loadTimeWeaver, this.beanClassLoader);					break;			}		}		return loadTimeWeaver;	}}